OOP Pillar:
1. Encapsulation (Pengkapsulan): Encapsulation adalah konsep yang mengacu pada pembungkusan atau penyembunyian data dan metode dalam sebuah objek. Dalam OOP, sebuah objek seharusnya memiliki atribut (data) dan metode (fungsi) yang terkait dengan objek tersebut. Pengkapsulan memungkinkan Anda untuk menjaga data tersebut agar tidak dapat diakses atau dimodifikasi langsung dari luar objek. Ini dilakukan dengan mengatur aksesibilitas data menggunakan access modifiers seperti private, protected, dan public. Pengkapsulan membantu dalam mencegah perubahan yang tidak sah pada data objek dan meningkatkan keamanan program.
   Contohnya saya menggunakan Encapsulation private untuk membuat fied pada kelas. hal itu membatasi hak akses ke kelas lain.

2. Inheritance (Pewarisan): Pewarisan adalah konsep yang memungkinkan Anda untuk membuat kelas baru yang mewarisi sifat dan perilaku dari kelas yang sudah ada. Kelas yang sudah ada disebut sebagai kelas induk atau kelas dasar, sedangkan kelas yang baru dibuat disebut kelas anak atau kelas turunan. Pewarisan memungkinkan untuk menghindari duplikasi kode dan mempromosikan reusabilitas kode. Kelas anak dapat menambahkan metode tambahan atau mengganti metode yang diwarisi dari kelas induk.
   Saya menggunakan Pilar ini pada bagian kelas service, yang mana service implement harus menurunkan setiap method yang ada pada parent class

3. Polymorphism (Polimorfisme): Polimorfisme adalah konsep yang mengizinkan objek dari kelas yang berbeda untuk merespons metode-metode dengan cara yang berbeda sesuai dengan tipe data mereka atau hubungan hierarki kelas. Dengan polimorfisme, Anda dapat menggunakan antarmuka yang sama untuk berinteraksi dengan objek-objek yang memiliki perilaku yang berbeda. Ada dua jenis polimorfisme: polimorfisme compile-time (disebut juga static binding) dan polimorfisme runtime (disebut juga dynamic binding).

4. Abstraction (Abstraksi): Abstraksi adalah konsep yang mengacu pada penyederhanaan kompleksitas dengan cara menyembunyikan detail yang tidak perlu dari suatu objek dan hanya mengekspos fungsionalitas yang penting. Dalam OOP, kelas abstrak adalah kelas yang tidak dapat diinstansiasi dan hanya berfungsi sebagai kerangka kerja atau template untuk kelas anak yang lebih spesifik. Abstraksi membantu dalam memfokuskan perhatian pada fitur-fitur yang penting dan mengurangi kompleksitas.